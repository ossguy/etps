= Phase 1 =

SMS over XMPP - building XMPP gateways that talk to carriers' REST APIs.

== Overview ==

=== Voice ===

Note that voice is important, but out of scope for this part.  At most, a small carrier-specific tutorial and/or scripts for setting up/logging into the SIP portion of one's account will be provided, since this might not be familiar to users of existing services (ie. a SIP account isn't setup by default with most REST API "carriers" - you need to configure/add an endpoint, then point that to your number somehow using a carrier-specific "application").

=== SMS ===

XMPP gateways (XEP-0100) (as I understand it, a superset of components (XEP-0114)) will be built that act as bridges between several carriers' REST APIs and the user's XMPP client, allowing the user to send and receive SMS by "chatting" with another JID, the JID representing the phone number of the recipient and being provided by the XMPP gateway.

Multiple carriers will be supported - at least Bandwidth AP, Voxbone, and VoIP.ms.  While some carriers support SMS over XMPP already, they usually fail to support other important features, such as Unicode (including emoji), MMS, and shortcodes.  It is important to be able to use the above carriers (which support some or most of those features) over XMPP, as they don't provide their own XMPP interface.

The initial plan is to present the gateway to the user as <carrier>.soprani.ca.  For example, the user would perform a service discovery on soprani.ca and find that it provides bandwidth-ap.soprani.ca, voipms.soprani.ca, and voxbone.soprani.ca.  Once one adds the gateway/transport, they'll be prompted for their API credentials (normally token and key) plus the DID they want to use.

Phase 1 will at least support Unicode, and probably shortcodes (using a ;phone-context=[<carrier-name>.]<2-digit-country-code>.phone-context.soprani.ca or similar per RFC 3966, since they aren't E.164 numbers - E.164 numbers would simply be used by themselves as the localpart, ie. +12345678901).  It might support MMS, but that will be trickier (though it should be designed so that adding this later will not be unnecessarily difficult).

== Architecture ==

At a high level, messages will be received from the carrier by some process that will put them into a Redis list, where they will be further processed and possibly long-term stored until eventually being delivered to the XMPP component that will give them to the user.  It seems that most carriers being supported already store the complete SMS history so storing them more permanently in the Redis database is not strictly necessary, but might be helpful (or at least should be considered going forward).

More specifically, messages will be received from the carrier by a process waiting for HTTP requests (ie. a Ruby script using Sinatra).  This process will LPUSH the JSON-encoded message (including to/from/body/timestamp(s)) into a Redis list at a key named "<phone_number>-from_carrier" or similar.  Then the next process will BRPOPLPUSH the from that list into a "<phone_number>-from_carrier-processing" list, and either save the SMS into some more permanent Redis list, or just deliver it to the XMPP component (a separate process doing its own BRPOPLPUSH on the "<phone_number>-from_carrier-processing" or similar list).
